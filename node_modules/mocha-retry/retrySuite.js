// Generated by CoffeeScript 1.10.0
(function() {
  var patchMochaSuite;

  module.exports = patchMochaSuite = function(Mocha) {
    var RetryHook, Suite;
    Suite = Mocha.Suite;
    RetryHook = require('./retryHook');
    Suite.prototype.beforeAllWithRetry = function(times, title, fn) {
      var hook, ref, ref1;
      if (this.pending) {
        return this;
      }
      if (title == null) {
        fn = times;
        title = fn.name;
        times = void 0;
      } else if (fn == null) {
        if (typeof times === 'number') {
          ref = [void 0, title], title = ref[0], fn = ref[1];
        } else {
          ref1 = [times, title, void 0], title = ref1[0], fn = ref1[1], times = ref1[2];
        }
        if (typeof title === 'function') {
          fn = title;
          title = fn.name;
        }
      }
      if ((times == null) && (this.times != null)) {
        times = this.times;
      }
      title = "\"before all\" hook" + (title ? ": " + title : "");
      hook = new RetryHook(times, title, fn);
      hook.parent = this;
      hook.timeout(this.timeout());
      hook.slow(this.slow());
      hook.ctx = this.ctx;
      this._beforeAll.push(hook);
      this.emit("beforeAll", hook);
      return this;
    };
    Suite.prototype.beforeEachWithRetry = function(times, title, fn) {
      var hook, ref, ref1;
      if (this.pending) {
        return this;
      }
      if (title == null) {
        fn = times;
        title = fn.name;
        times = void 0;
      } else if (fn == null) {
        if (typeof times === 'number') {
          ref = [void 0, title], title = ref[0], fn = ref[1];
        } else {
          ref1 = [times, title, void 0], title = ref1[0], fn = ref1[1], times = ref1[2];
        }
        if (typeof title === 'function') {
          fn = title;
          title = fn.name;
        }
      }
      if ((times == null) && (this.times != null)) {
        times = this.times;
      }
      title = "\"before each\" hook" + (title ? ": " + title : "");
      hook = new RetryHook(times, title, fn);
      hook.parent = this;
      hook.timeout(this.timeout());
      hook.slow(this.slow());
      hook.ctx = this.ctx;
      this._beforeEach.push(hook);
      this.emit("beforeEach", hook);
      return this;
    };
    Suite.prototype.afterAllWithRetry = function(times, title, fn) {
      var hook, ref, ref1;
      if (this.pending) {
        return this;
      }
      if (title == null) {
        fn = times;
        title = fn.name;
        times = void 0;
      } else if (fn == null) {
        if (typeof times === 'number') {
          ref = [void 0, title], title = ref[0], fn = ref[1];
        } else {
          ref1 = [times, title, void 0], title = ref1[0], fn = ref1[1], times = ref1[2];
        }
        if (typeof title === 'function') {
          fn = title;
          title = fn.name;
        }
      }
      if ((times == null) && (this.times != null)) {
        times = this.times;
      }
      title = "\"after all\" hook" + (title ? ": " + title : "");
      hook = new RetryHook(times, title, fn);
      hook.parent = this;
      hook.timeout(this.timeout());
      hook.slow(this.slow());
      hook.ctx = this.ctx;
      this._afterAll.push(hook);
      this.emit("afterAll", hook);
      return this;
    };
    return Suite.prototype.afterEachWithRetry = function(times, title, fn) {
      var hook, ref, ref1;
      if (this.pending) {
        return this;
      }
      if (title == null) {
        fn = times;
        title = fn.name;
        times = void 0;
      } else if (fn == null) {
        if (typeof times === 'number') {
          ref = [void 0, title], title = ref[0], fn = ref[1];
        } else {
          ref1 = [times, title, void 0], title = ref1[0], fn = ref1[1], times = ref1[2];
        }
        if (typeof title === 'function') {
          fn = title;
          title = fn.name;
        }
      }
      if ("function" === typeof title) {
        fn = title;
        title = fn.name;
      }
      if ((times == null) && (this.times != null)) {
        times = this.times;
      }
      title = "\"after each\" hook" + (title ? ": " + title : "");
      hook = new RetryHook(times, title, fn);
      hook.parent = this;
      hook.timeout(this.timeout());
      hook.slow(this.slow());
      hook.ctx = this.ctx;
      this._afterEach.push(hook);
      this.emit("afterEach", hook);
      return this;
    };
  };

}).call(this);
